#!/bin/bash
#
# rofimenu
#
thisscript="$0"

# Script that runs rofi in several custom rofi modi, emulating menu with submenus.
# Only one option should be used.
# No options or option "-show" starts rofi showing the first modi.
# Option "-show <modi>" starts rofi showing <modi>. The rest of command line is passed to rofi.
# Option "-only <modi>" starts rofi showing only <modi>. The rest of command line is passed to rofi.
# Option "-menu <menu>" calls menu function <menu> and prints menu labels from each line.
# It is used to define custom modi.
# Option "-menu <menu> <label>" calls menu function <menu> and executes command from line with <label>.

ROFIMENU_CONFIG="$HOME/.config/rofimenu/rofimenurc"

# If there is no config file, write default config

if ! [ -f "$ROFIMENU_CONFIG" ] ; then
	mkdir -p "${ROFIMENU_CONFIG%/*}"
	cat > "$ROFIMENU_CONFIG"<<"_EOF_"
#!/bin/bash
# Configuration file for rofimenu script
#
# Top level menu consists of modi names from modilist.
# Modilist is a comma separated list of default modi (drun,run...) and/or custom modi.
# Names of default modi can be set as rofi options (e.g. -display-drun Applications).
# Custom modi format: "modi_name:modi_script".
# Menu functions from this script can be used as modi like this "<menu_name>:$thisscript -menu <menu_function>"

# pause needed for smooth transition when menu command refers to other modi
DELAY=0.05
delay() {
	sleep $DELAY
}

# define modi labels for menu

FAV=" Favourites"
DRUN=" Applications"
CAT=" Categories"
RUN=" Run"
SET=" Menu settings"
EXIT=" Exit"

modilist="\
$FAV:$thisscript -menu ${FAV#* },\
drun,\
$CAT:$thisscript -menu ${CAT#* },\
run,\
$SET:$thisscript -menu Menu_settings,\
$EXIT:$thisscript -menu ${EXIT#* }"

# Menu functions print lines in format "label:command".

Menu_settings() {
	echo " Edit menu config:$GUI_EDITOR $ROFIMENU_CONFIG && $thisscript -show \'$SET\'"
	echo " Reset menu config:rm $ROFIMENU_CONFIG && delay; $thisscript -show \'$SET\'"
	echo "───────────────────:true"
	echo " Edit menu theme:$GUI_EDITOR $ROFI_CONFIG && $thisscript -show \'$SET\'"
	echo " Reset menu theme:rm $ROFI_CONFIG && delay; $thisscript -show \'$SET\'"
}

Favourites() {
	echo " Terminal:default-terminal"
	echo " File Manager:default-terminal -e ranger"
	echo " Browser:default-browser"
	echo " Settings:default-terminal -e bmenu"
	echo " Search:rofi-finder.sh"
	echo " Exit:delay; $thisscript -show \'$EXIT\'"		# This refers to modi from the same script
}

Exit() {
	echo " lock:screenlock"
	echo " suspend:systemctl suspend"
	echo " hibernate:systemctl hibernate"
	echo " logout:xdotool key --clearmodifiers super+shift+q"
	echo " reboot:systemctl reboot"
	echo " poweroff:systemctl poweroff"
}

Categories() {
	IFS='
'
	# Newline separated list, each line has format "[symbol ][alias:]category"
	# Category with alias will be shown in menu under that alias
desired="\
 Favorites
 Accessories:Utility
 Development
 Documentation
 Education
 Graphics
 Internet:Network
 Multimedia:AudioVideo
 Office
 Settings
 System"

	present="$(grep Categories /usr/share/applications/*.desktop \
		| cut -d'=' -f2 \
		| sed 's/;/\n/g' \
		| LC_COLLATE=POSIX sort --ignore-case --unique)"

	linenumber=0
	for line in $desired ; do
		category="${line##*[ :]}"
		label="${line%:*}"
		if [ $(echo "$present"|grep -w -c "$category") -gt 0 ] ; then
			echo "$label:activate_category \"$label\" $category $linenumber"
			linenumber=$(($linenumber+1))
		fi
	done
}

activate_category() {	# shows drun modi filtered with category. If no command selected, returns to categories modi
	label="$1"
	category="$2"
	linenumber="$3"
	command=$($thisscript \
				-only drun \
				-drun-match-fields categories,name \
				-display-drun "$label" \
				-filter "$category " \
				-run-command "echo {cmd}")
	if [ -n "$command" ] ; then
		eval "$command" &
		exit
	fi
	# return to categories modi. No delay needed
	$thisscript -show "$CAT" &
	
	if [ $linenumber -eq 0 ] ; then	# if the category is on the top line
		exit
	fi

	# move rofi selection down by linenumber
	keys=""
	while [ $linenumber -gt 0 ] ; do
		keys="$keys Tab"
		linenumber=$(($linenumber-1))
	done	
	##TODO wait until rofi can take input
	delay
	delay
	xdotool search --class rofi key --delay 0 $keys
}
_EOF_
fi

# read config file
. "$ROFIMENU_CONFIG"

ROFI_CONFIG="$HOME/.config/rofi/rofimenu.rasi"

# if there is no theme file, write default teme file

if ! [ -f "$ROFI_CONFIG" ] ; then
	mkdir -p "${ROFI_CONFIG%/*}"
	cat > "$ROFI_CONFIG"<<"_EOF_"
configuration {
	me-select-entry:	"MouseSecondary";
	me-accept-entry:	"MousePrimary";
	scroll-method:      1;
    show-icons:         true;
    sidebar-mode:		true;
    kb-custom-1:        "";
    kb-custom-2:        "";
    kb-custom-3:        "";
    kb-custom-4:        "";
    kb-custom-5:        "";
    kb-custom-6:        "";
    kb-custom-7:        "";
    kb-custom-8:        "";
    kb-custom-9:        "";
    kb-custom-10:       "";
    kb-select-1:        "Alt+1";
    kb-select-2:        "Alt+2";
    kb-select-3:        "Alt+3";
    kb-select-4:        "Alt+4";
    kb-select-5:        "Alt+5";
    kb-select-6:        "Alt+6";
    kb-select-7:        "Alt+7";
    kb-select-8:        "Alt+8";
    kb-select-9:        "Alt+9";
    kb-select-10:       "Alt+0";
}

* {
//	colors match bspwm edition theme

	background:                  #292f34FF;
	background-color:            #292f3400;
	foreground:                  #F6F9FFFF;
	selected:                    #1ABB9BFF;
	selected-foreground:         @foreground;

//	colors match Adapta Nokto theme

//	background:                  #222D32E8;
//	background-color:            #00000000;
//	foreground:                  #CFD8DCFF;
//	selected:                    #00BCD4FF;
//	selected-foreground:         #FFFFFFFF;

    active-background:           #3A464BFF;
    urgent-background:           #800000FF;
    urgent-foreground:           @foreground;
    selected-urgent-background:  @urgent-foreground;
    selected-urgent-foreground:  @urgent-background;

//    font:                        "xos4 Terminus 18px";
    font:                        "Knack Nerd Font 16px";
    text-color:                  @foreground;

	margin:                      0px;
    border:                      0px;
    padding:                     0px;
    spacing:                     0px;
    addpadding:                  2px 1ch;
}
window {
	location:		northwest;
	anchor:			northwest;
	x-offset:		0;
	y-offset:		24;
	width:			45ch;
}
mainbox {
	orientation:	horizontal;
	children:		[ sidebar, vertibox ];
}
sidebar {
	orientation:	vertical;
}
button {
	horizontal-align:	0;
	expand:			false;
	padding:		@addpadding;
	width:			18ch;
	background-color:	@background;
}
vertibox {
	orientation:	vertical;
	children:		[ inputbar, listview ];
	background-color:	@background;
}
inputbar {
	children:		[ entry, ci ];
}
entry {
	padding:		@addpadding;
}
listview {
	lines:			20;
	fixed-height:	false;
	dynamic:		false;
	scrollbar:		true;
}
element {
	padding:		@addpadding;
}
element.normal.active,
element.alternate.active {
    background-color: @active-background;
    text-color:       @selected-foreground;
}
element.selected,
button.selected {
    background-color: @selected;
    text-color:       @selected-foreground;
}
element.normal.urgent,
element.alternate.urgent {
    background-color: @urgent-background;
    text-color:       @urgent-foreground;
}
element.selected.urgent {
    background-color: @selected-urgent-background;
    text-color:       @selected-urgent-foreground;
}
scrollbar {
	width:			1ch;
	handle-color:	@selected;
}
_EOF_
fi

###############################
##  MAIN SCRIPT STARTS HERE  ##
###############################

if [ $# -gt 0 ] ; then
	option="$1"
	shift
else
	option="-show"
fi

case "$option" in

	#####################
	## show only this modi
	"-only")
		modilist=$(echo $modilist|grep -o "${1}[^,]*")
		;&

	##############################
	## no options or option "-show"
	"-show")
		if [ $# -gt 0 ] ; then
			showmodi="$1"
			shift
		else
			showmodi="${modilist%%,*}"	# first modi from list
			showmodi="${showmodi%%:*}"	# modi name if modi is custom
		fi

		##TODO determine element length and modi lenght

		## wait until rofi exits
		while pgrep -x rofi >/dev/null 2>&1 ; do
			delay;
		done
				# the rest of command line is passed to rofi
		rofi	"$@" \
				-modi "$modilist" \
				-show "$showmodi" \
				-config "$ROFI_CONFIG" \
				-display-run "$RUN" \
				-display-drun "$DRUN" &
		exit
		;;

	###################################
	# option "-menu" 
	"-menu")
		case $# in
			0)	exit 1	# must have menu function name
				;;
			1)	# "-menu <menu>" and no more parameters calls <menu> function and prints labels from each line
				$1 \
				| while read line; do
					echo "${line%%:*}"
				  done
				  exit
				;;
			*)	# "-menu <menu> <label>" calls <menu> function and executes command from line with <label>
				$1 \
				| while read line; do
					if [ "$2" = "${line%%:*}" ] ; then
						command="${line#*:}"
						eval "$command" &
						exit
					fi
				  done >/dev/null 2>&1
		esac
		;;

	################
	# unknown option
	*)	exit 1
esac
